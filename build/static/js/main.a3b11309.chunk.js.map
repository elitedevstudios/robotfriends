{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAeeA,EAbF,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uDACZH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BT,EAA1B,cACpBG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCsBLQ,EAtBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OAEhB,OACIR,EAAAC,EAAAC,cAAA,WAEIM,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACIX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAMF,EACNd,GAAIW,EAAOG,GAAGd,GACdC,KAAMU,EAAOG,GAAGb,KAChBC,MAASS,EAAOG,GAAGZ,YCIxBe,EAfG,SAAAlB,GAAiCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aAC7B,OAEIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACAC,UAAY,mCACZc,KAAM,SACNC,YAAa,gBACbC,SAAWH,MCJRI,EATA,SAACC,GACZ,OACIrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,UAAU,kBAAmBC,OAAQ,UAClEJ,EAAMK,WC4CJC,qBArCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEtB,YAAaqB,EAAME,OAAOC,SAb1CX,EAAKY,MAAQ,CACThC,OAAQ,GACRO,YAAa,IAJRa,mFAQM,IAAAa,EAAAV,KACfW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC7B,OAAQsC,uCAOjC,IAAAC,EACqBhB,KAAKS,MAA5BhC,EADEuC,EACFvC,OAAQO,EADNgC,EACMhC,YACTiC,EAAiBxC,EAAOyC,OAAO,SAAAC,GACjC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASrC,EAAYoC,iBAGzD,OAAQ3C,EAAO6C,OAGPrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAee,KAAKI,iBAC/BnC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAUwC,MAN/BhD,EAAAC,EAAAC,cAAA,4BA1BSuD,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.a3b11309.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) =>{\n    return(\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Card;","/*\n    This module takes takes the Card.js tempate loops through the robot.js with the array of users,\n    And makes cards for all the users.  \n\n*/\nimport React from 'react';\nimport Card from './Card';// Calling the Card Template\n\nconst CardList = ({ robots }) => {\n\n    return(// necessary\n        <div>\n        {\n            robots.map((user,i) => {\n            return (\n                <Card \n                    key ={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email = {robots[i].email}\n\n                />\n            );\n            })\n        }\n        </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\nimport CardList from './CardList'; // Calling the Card Template\n//import {robots} from './robots'; // import robot.js\n\n\n\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return ( \n        //retuns an input, place holder,\n        <div className='pa2'>\n            <input \n            className = 'pa3 ba b--green bg-lightest-blue'\n            type ='search' \n            placeholder ='Search Robots'\n            onChange ={searchChange}\n            />\n        </div>\n    \n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', borderTop:'1px solid black', height: '100vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll;","/*\n    Contains all the modules to be called on the index page. \n\n*/\nimport React, {Component} from 'react';\nimport CardList from '../components/CardList'; // Calling the Card Template\nimport SearchBox from '../components/SearchBox'; //Add Searchbox component\n//import {robots} from './robots'; // import robot.js\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n//App component has two states\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    // Get users from .json API\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}));    \n    }\n    //Search function change state\n    onSearchChange = (event) => { \n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot =>{\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n        //Assuming  that the json file takes awhile to load you can put an if statement.\n    return !robots.length ?\n         <h1>Loading</h1> :\n    (\n            <div className='tc'>\n                <h1 className='f1'>Robot Friends</h1>\n                <SearchBox searchChange ={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots = {filteredRobots}/>\n                </Scroll>\n            </div> ///this.state.robots - React syntax. \n            );\n    }\n}\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App'; //import card list component\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}